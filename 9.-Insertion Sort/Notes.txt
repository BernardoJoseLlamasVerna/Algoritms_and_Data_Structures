Insertion Sort:
---------------
- Builds up the sort by gradually creating a larger left half which is always sorted.

[5, 3, 4, 1, 2] ---> 3 compares to 5, 3 is less => swap
[3, 5, 4, 1, 2] ---> 4 compares to [3, 5]; 4 is less than 5, bigger than 3 => swap
[3, 4, 5, 1, 2] ---> 1 compares to [3, 4, 5]; 1 is the smallest => swap to the beginning to sorted array.
[1, 3, 4, 5, 2] ---> 2 compares to [1, 3, 4, 5]; 2 is bigger than 1 => swap.
[1, 2, 3, 4, 5]

** note: we're not going to swap, but store number on memory.

Pseudocode:
-----------
- Start by picking the second element in the array.
- Now compare the second element with the one before it and swap if necessary.
- Continue to the next element and if it is in the incorrect order, iterate through the sorted portion
  (i.e. the left side) to place the element in the correct place.
- Repeat until the array is sorted.

Time Complexity:
----------------
- O(nÂ²) ---> it grows when array length grows.
- Complexity also grows if array is not closely sorted.

