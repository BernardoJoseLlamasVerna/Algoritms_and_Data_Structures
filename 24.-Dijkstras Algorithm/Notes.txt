Dijkstra's Algorithm:
---------------------
1.-What is it:
--------------
- One of the most famous and widely used algorithms around.
- Finds the shortest path between two vertices on a graph.
    - "find the fastest way to get from A to B".

2.-Why is it useful?
--------------------
- GPS: finding fastest route.
- Network Routing: finds open shortest path for data.
- Biology: used to model the spread of viruses among humans.
- Airline tickets: finding cheapest route to your destination.
- Biology: used to model the spread of viruses among humans.
- etc.

3.-Let's write a weighted graph:
--------------------------------
*How it works:
- Every time we look to visit a new node, we pick the node with the smallest
  known distance to visit first.
- Once we've moved to the node we're going to visit, we look at each of its neighbors.
- For each neighboring node, we calculate the distance by summing the total edges
  that lead to the node we're checking from the starting node.
- If the new total distance to a node is less than the previous total,
  we store the new shorter distance for that node.

*Pseudocode:
- This function should accept a starting and ending vertex.
- Create an object (call it distances) and set each key to be every vertex in the adjacency
  list with a value of infinity, except for the starting vertex which should have a value of 0.
- After setting a value in the distances object, add each vertex with a priority of Infinity to
  the priority queue, except the starting vertex, which should have a priority of 0 because
  that's where we begin.
- Create another object called previous and set each key to be every vertex in the adjacency
  list with a value of null.
- Start looping as long as there is anything in the priority queue:
    - dequeue a vertex from the priority queue.
    - if that vertex is the same as the ending vertex -> we're done!
    - otherwise loop through each value in the adjacency list at that vertex.
        - calculate the distance to that vertex from the starting vertex.
        - if the distance is less than what is currently stored in our distances object.
            - update the distances object with new lower distance.
            - update the previous object to contain that vertex.
            - enqueue the vertex with the total distance from the start node.
