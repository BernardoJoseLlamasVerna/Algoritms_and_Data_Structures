Graphs:
-------
1.-What are graphs:
-------------------
- A graph is a data structure that consists of a finite (and possibly mutable)
  set of vertices or nodes or points together with a set of unordered pairs of
  these vertices for an undirected graph, or a set of ordered pairs for a directed graph.
- A graph is a collection of nodes and connections.

2.-Uses of graphs:
------------------
- social networks.
- location / mapping.
- routing algorithms.
- etc.

3.-Types of Graphs:
-------------------
*Essential Graph Terms:
- Vertex: a node.
- Edge: connection between nodes.
- Weighted / Unweighted: values assigned to distances between vertices.
- Directed / Undirected: directions assigned to distanced between vertices.

4.-Storing Graphs:
------------------
* Adjacency Matrix:
- Represent connections between nodes using a matrix
    - node A connected with node B: 1
    - node A not connected with node B: 0

* Adjacency List:
- An array or list stores the connections between nodes:

* List vs Matrix big O:
- List:
    - Can take up less space (in sparse graphs).
    - Faster to iterate over all edges.
    - Can be slower to lookup specific edge.
- Matrix:
    - Takes up more space (in sparse graphs).
    - Slower to iterate over all edges.
    - Faster to lookup specific edge.

* Adjacency List is more used because most data in the real-world tends
  to lend itself to sparser and/or larger graphs.

5.-Adding a Vertex:
-------------------
*Pseudocode:
- Write a method called addVertex, which accepts a name of a vertex.
- It should add a key to the adjacency list with the name of the vertex
  and set its value to be an empty array.

6.-Adding an edge:
------------------
*Pseudocode:
- This function should accept two vertices, we can call them vertex1 and vertex2.
- The function should find in the adjacency list the key of vertex1 and push vertex2 to the array.
- The function should find in the adjacency list the key of vertex2 and push vertex1 to the array.
- Don't worry about handling errors/invalid vertices.

7.-Removing an edge:
--------------------
*Pseudocode:
- This function should accept 2 vertices, we'll call them vertex1 and vertex2.
- The function should reassign the key of vertex1 to be an array that does not contain vertex2.
- The function should reassign the key of vertex2 to be an array that does not contain vertex1.
- Don't worry about handling errors/invalid vertices.

8.-Removing a vertex:
---------------------
*Pseudocode:
- The function should accept a vertex to remove.
- The function should loop as long as there are any other vertices in the adjacency list for that vertex.
- Inside of the loop, call our removeEdge function with the vertex we are removing and any values in the
  adjacency list for that vertex.
- Delete the key in the adjacency list for that vertex.
