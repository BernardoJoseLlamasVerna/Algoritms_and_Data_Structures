Merge Sort:
-----------
- Previous algorithms don't scale well.
- Merge, Quick and Radix are algorithms that can improve time complexity from O(nÂ²) to O(nlogn).
- There is a tradeoff between efficiency and simplicity.
- The more efficient algorithms are much less simple, and generally take longer to understand.

- Merge Sort is a combination of two things: merging and sorting.
- Exploits the fact that arrays of 0 or 1 element are always sorted.
- Works by decomposing an array into smaller arrays of 0 or 1 elements,
  then building up a newly sorted array.

How does it work:
-----------------
1.- Split an array into smaller arrays till have one-element arrays.
[8, 3, 5, 4, 7, 6, 1, 2]
[8, 3, 5, 4] - [7, 6, 1, 2]
[8, 3] - [5, 4] - [7, 6] - [1, 2]
[8] - [3] - [5] - [4] - [7] - [6] - [1] - [2]

2.- Join into sorted arrays step by step:
[3, 8] - [4, 5] - [6, 7] - [1, 2]
[3, 4, 5, 8] - [1, 2, 6, 7]
[1, 2, 3, 4, 5, 6, 7, 8]

- In order to implement merge sort, it's useful to first implement a function
  responsible for merging two sorted arrays.
- Given two arrays which are sorted, this helper function should create a new
  array which is also sorted, and consists of all of the elements in the two input arrays.
- This function should run in O(n+m) time and O(n+m) space and should not modify the
  parameters passed to it.

Merge Method Pseudocode (Merge Method ---> helper function of MergeSort):
-----------------------
- Create an empty array, take a look at the smallest values in each input array.
- While there are still values we haven't looked at...
    * if the value in the first array is smaller than the vallue in the second array,
      push the value in the first array into our results and move on to the next value in the first array.
    * if the value in the first array is larger than the value in the second array, push the value in the
      second array into our results and move on to the next value in the second array.
    * once we exhaust one array, push in all remaining values from the other array.

    merge([1, 10, 50], [2, 14, 99, 100])

    [1, 10, 50]  [2, 14, 99, 100]
    1.-[1, 2]
    2.-[1, 2, 10, 14, 50]
    3.-[1, 2, 10, 14, 50, 99]
    4.-[1, 2, 10, 14, 50, 99, 100]

MergeSort Pseudocode:
---------------------
- Break up the array into halves until you have arrays that are empty or have one element.
- Once you have smaller sorted arrays, merge those arrays with other sorted arrays until
  you are back at the full length of the array.
- Once the array has been merged back together, return the merged (and sorted!) array.
