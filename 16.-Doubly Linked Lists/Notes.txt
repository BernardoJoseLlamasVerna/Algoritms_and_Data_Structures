Doubly Linked Lists
-------------------
- Almost identical to Singly Linked Lists, except every node has another pointer to the previous node.
 -- you can go from a node to its next and come back.
 -- we need two pointers next/prev.
 -- more memory === more flexibility

1.-Push:
--------
- Adding a node to the end of the Doubly Linked List.

*Pseudocode:
- Create a new node with the value passed to the function.
- If the head property is null set the head and tail to be the newly created node.
- If not, set the next property on the tail to be that node.
- Set the previous property on the newly created node to be the tail.
- Set the tail to be the newly created node.
- Increment the length.
- Return the Doubly Linked List.

2.-Pop:
-------
- Removing a node from the end of the Doubly Linked List.

*Pseudocode:
- If there is no head, return undefined.
- Store the current tail in a variable to return later.
- If the length is 1, set the head and tail to be null.
- Update the tail to be the previous Node.
- Set the newTail's next to null.
- Decrement the length.
- Return the value removed.

3.-Shifting:
------------
- Removing a node from the beginning of the Doubly Linked List.

*Pseudocode:
- If length is 0, return undefined.
- Store the current head property in a variable (call it old head).
- If the length is one:
    * set the head to be null.
    * set the tail to be null.
- Update the head to be the next of the old head.
- Set the head's prev property to null.
- Set the old head's next to null.
- Decrement the length.
- Return old head.

4.-Unshifting:
--------------
- Adding a node to the beginning of the Doubly Linked List.

*Pseudocode:
- Create a new node with the value passed to the function.
- If the length is 0:
    * set the head to be the new node.
    * set the tail to be the new node.
- Otherwise:
    * set the prev property on the head of the list to be the new node.
    * set the next property on the new node to be the head property.
    * update the head to be the new node.
- Increment the length.
- Return the list.

5.-Get:
-------
- Accessing a node in a Doubly Linked List by its position.
    ** we can search from the beginning or from the end of the list, depending the index.

*Pseudocode:
- If the index is less than 0 or greater or equal to the length, return null.
- If the index is less than or equal to half the length of the list:
    * loop through the list starting from the head and loop towards the middle.
    * return the node once it is found.
- If the index is greater than half the length of the list:
    * loop through the list starting from the tail and loop towards the middle.
    * return the node once it is found.

6.-Set:
-------
- Replacing the value of a node in a Doubly Linked List.

*Pseudocode:
- Create a variable which is the result of the get method at the index passed to the function.
    * If the get method returns a valid node, set the value of that node to be the value passed
      to the function.
    * Return true.
- Otherwise, return false.

7.-Insert:
----------
- Adding a node in a Doubly Linked List by a certain position.

* Pseudocode:
- If the index is less than zero or greater than or equal to the length, return false.
- If the index is 0, unshift.
- If the index is the same as the length, push.
- Use the get method to access the index -1.
- Set the next and prev properties on the correct nodes to link everything together.
- Increment the length.
- Return true.
