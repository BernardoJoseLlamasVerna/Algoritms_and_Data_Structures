Hash Tables:
------------
1.-What is a Hash Table?
------------------------
- Hash tables are used to store key-value pairs.
- They are like arrays, but the keys are not ordered.
- Unlike arrays, hash tables are fast for all of the following operations: finding values,
  adding new values and removing values!
- Because of their speed, are very commonly used.

- To implement a hash table we'll be using an array.
- In order to look up values by key, we need a way to convert keys into valid array indices.
- A function that performs this task is called hash function.
- We don't know index value of each element.

2.-What makes a good hash?
--------------------------
- Fast (i.e. constant time).
- Doesn't cluster outputs at specific indices, but distributes uniformly.
- Deterministic (same input yields same output).

3.-Prime Numbers, why:
----------------------
- The prime number in the hash is helpful in spreading out the keys more uniformly.
- It's also helpful if the array that you're putting values into has a prime length.

4.-Dealing with Collisions:
---------------------------
- Even with a large array and a great hash function, collisions are inevitable.
- There are many strategies for dealing with collisions, but we will focus on two:
    - Separate Chaining
    - Linear Probing

* Separate Chaining:
--------------------
- With separate chaining, at each index in our array we store values using a
  more sophisticated data structure (e.g. an array or a linked list).
- This allows us to store multiple key-value pairs at the same index.

* Linear Probing:
-----------------
- With linear probing, when we find a collision, we search through the array to find the next empty slot.
- Unlike separate chaining, this allows us to store a single key-value at each index.

5.-Set Method:
--------------
- Accepts a key and a value.
- Hashes the key.
- Stores the key-value pair in the hash table array via separate chaining.

6.-Get Method:
--------------
- Accepts a key and a value.
- Hashes the key.
- Retrieves the key-value pair in the hash table.
- If the key is not found, return undefined.

7.-Keys / Values:
-----------------
*Keys:
- Loops through the hash table array and returns an array of keys in the table.

*Values:
- Loops through the hash table array and returns an array of values in the table.
