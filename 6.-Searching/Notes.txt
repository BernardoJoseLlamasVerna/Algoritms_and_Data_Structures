Linear Search:
--------------
Given an array, the simplest way to search for a value is to look at every element in the array and check
if it's the value we want.

JS implements indexOf, includes, find, findIndex.

Linear Search Big O implementation:
-----------------------------------
- best scenario: O(1), search something that exists on the array ---> O(1) operations
- worst scenario: O(n), search something that doesn't exist on the array ---> O(n) operations
- average: O(n) ---> something almost at the end of the array.

Binary Search:
--------------
- binary search is a much faster form of search.
- rather than eliminating one element at a time, you can eliminate half
  of the remaining elements at a time.
- IMPORTANT: binary search only works on sorted arrays!
- NOTE: every time we double the size of an array and every time we double it,
  we're simply adding one extra step ( O(n) ).

- best case: O(1)
- worst and average case: O(logN)

Naive String Search:
--------------------
- Suppose you want to count the number of times a smaller string appears in a longer string.
- A straightforward approach involves checking pairs of characters individually.

*Pseudocode:
- loop over the longer string.
- loop over the shorter string.
- If the characters don't match, break out the inner loop.
- If the characters do match, keep going.
- If you complete the inner loop and find a match, increment the count of matches.
- Return the count.

