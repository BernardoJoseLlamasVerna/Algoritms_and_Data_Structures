
What is a recursion?
-------------------
A process (a function) that calls itself.

Why do I care?
--------------
* You're used to functions being pushed on the call stack and popped off when they are done.
* When we write recursive functions, we keep pushing new functions onto the call stack!

**call stack: tool that JavaScript uses to manage function invocations.

Two essential parts of a recursive function:
--------------------------------------------
* Base Case (a situation when the recursion ends)
* Different Input

function sumRange(num) {
    if(num === 1) return 1;        ----> base case (if doesn't exist, there will be problems)
    return num + sumRange(num -1); ----> Recursive Call.
}


Errors using recursion:
-----------------------
* no base case
* forgetting to return or returning the wrong thing!
* stack overflow ---> recursion never stops

Helper Method:
--------------
* to use a helper function inside recursion to avoid problems. ---> you call an inner function (helper) that is recursive.

Recursion Tips:
---------------
* For arrays, use methods like slice, the spread operator, and concat that make copies of arrays so you do not mutate them.
* Strings are immutable so you will need to use methods like slice, substr or substring to make copies of strings.
* To make copies of objects use Object.assign or the spread operator.
